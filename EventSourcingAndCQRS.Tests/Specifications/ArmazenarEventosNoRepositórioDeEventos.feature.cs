// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EventSourcingAndCQRS.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Armazenar eventos no repositório de eventos")]
    public partial class ArmazenarEventosNoRepositorioDeEventosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ArmazenarEventosNoRepositórioDeEventos.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Armazenar eventos no repositório de eventos", "Como um componente de software\r\nDesejo armazenar eventos no repositório de evento" +
                    "s", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Armazenar novo evento com versão esperada")]
        [NUnit.Framework.CategoryAttribute("ArmazenarEventoNoRepositórioDeEventos")]
        public virtual void ArmazenarNovoEventoComVersaoEsperada()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Armazenar novo evento com versão esperada", new string[] {
                        "ArmazenarEventoNoRepositórioDeEventos"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("que exista um repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 10
 testRunner.And(@"o evento USER_CREATED com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '0', disparado a partir da execução do comando CREATE_USER com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '-1', esteja salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 11
 testRunner.When(@"o evento USER_EMAIL_CHANGED com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '1', disparado a partir da execução do comando CHANGE_EMAIL com id 'id1', email 'joao@microsoft.com.br' e referente ao registro versão '0', for salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 12
 testRunner.Then("o evento mais atualizado do usuário de id \'id1\' no repositório de eventos deve se" +
                    "r a versão \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Armazenar novo evento com versão superior")]
        [NUnit.Framework.CategoryAttribute("ArmazenarEventoNoRepositórioDeEventos")]
        public virtual void ArmazenarNovoEventoComVersaoSuperior()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Armazenar novo evento com versão superior", new string[] {
                        "ArmazenarEventoNoRepositórioDeEventos"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("que exista um repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 17
 testRunner.And(@"o evento USER_CREATED com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '0', disparado a partir da execução do comando CREATE_USER com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '-1', esteja salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 18
 testRunner.When(@"o evento USER_EMAIL_CHANGED com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '2', disparado a partir da execução do comando CHANGE_EMAIL com id 'id1', email 'joao@microsoft.com.br' e referente ao registro versão '1', for salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 19
 testRunner.Then("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joao@microsoft.com." +
                    "br\' e referente ao registro versão \'2\' não deve estar armazenado no repositório " +
                    "de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 20
 testRunner.And("uma exceção do tipo CONCURRENCY_EXCEPTION deve ser lançada para o id \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Armazenar novo evento com versão inferior")]
        [NUnit.Framework.CategoryAttribute("ArmazenarEventoNoRepositórioDeEventos")]
        public virtual void ArmazenarNovoEventoComVersaoInferior()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Armazenar novo evento com versão inferior", new string[] {
                        "ArmazenarEventoNoRepositórioDeEventos"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("que exista um repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 25
 testRunner.And(@"o evento USER_CREATED com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '0', disparado a partir da execução do comando CREATE_USER com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '-1', esteja salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 26
 testRunner.When(@"o evento USER_EMAIL_CHANGED com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '-1', disparado a partir da execução do comando CHANGE_EMAIL com id 'id1', email 'joao@microsoft.com.br' e referente ao registro versão '-1', for salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 27
 testRunner.Then("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joao@microsoft.com." +
                    "br\' e referente ao registro versão \'-1\' não deve estar armazenado no repositório" +
                    " de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 28
 testRunner.And("uma exceção do tipo CONCURRENCY_EXCEPTION deve ser lançada para o id \'id1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Armazenar snapshot da entidade no repositório de eventos")]
        [NUnit.Framework.CategoryAttribute("ArmazenarEventoNoRepositórioDeEventos")]
        public virtual void ArmazenarSnapshotDaEntidadeNoRepositorioDeEventos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Armazenar snapshot da entidade no repositório de eventos", new string[] {
                        "ArmazenarEventoNoRepositórioDeEventos"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("que exista um repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 33
 testRunner.And("que exista um serviço consolidador de usuários a partir do repositório de eventos" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 34
 testRunner.And("que exista um encaminhador de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 35
 testRunner.And("que exista um publicador de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 36
 testRunner.And("que exista um encaminhador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 37
 testRunner.And("que exista um publicador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 38
 testRunner.And("que exista um manipulador de comando de criação de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 39
 testRunner.And("que exista um manipulador de comando de modificação de email de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 40
 testRunner.And("que exista um manipulador de comando de criação de snapshot de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 41
 testRunner.And("que o manipulador de comando de criação de usuários tenha sido configurado para r" +
                    "eceber comandos que sejam do tipo CREATE_USER do encaminhador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 42
 testRunner.And("que o manipulador de comando de modificação de email de usuários tenha sido confi" +
                    "gurado para receber comandos que sejam do tipo CHANGE_USER_EMAIL do encaminhador" +
                    " de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 43
 testRunner.And("que o manipulador de comando de criação de snapshot de usuários tenha sido config" +
                    "urado para receber comandos que sejam do tipo TAKE_USER_SNAPSHOT do encaminhador" +
                    " de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 44
 testRunner.And("que tenha sido publicado no publicador de comandos o comando CREATE_USER com id \'" +
                    "id1\', nome \'JOAO\', email \'joao@microsoft.com.br\' e referente ao registro versão " +
                    "\'-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 45
 testRunner.And("que tenha sido publicado no publicador de comandos o comando CHANGE_USER_EMAIL co" +
                    "m id \'id1\', email \'joao@concert.com.br\' e referente ao registro versão \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 46
 testRunner.And("que tenha sido publicado no publicador de comandos o comando CHANGE_USER_EMAIL co" +
                    "m id \'id1\', email \'joao.machado@concert.com.br\' e referente ao registro versão \'" +
                    "1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 47
 testRunner.And("que tenha sido publicado no publicador de comandos o comando CHANGE_USER_EMAIL co" +
                    "m id \'id1\', email \'joaosm@concert.com.br\' e referente ao registro versão \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 48
 testRunner.When("for publicado no publicador de comandos o comando TAKE_USER_SNAPSHOT com id \'id1\'" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 49
 testRunner.Then("o usuário de id \'id1\', nome \'JOAO\', email \'joaosm@concert.com.br\' e referente ao " +
                    "registro versão \'4\' deve estar armazenado no repositório de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 50
 testRunner.And("o evento USER_CREATED com id \'id1\', nome \'JOAO\', email \'joao@microsoft.com.br\' e " +
                    "referente ao registro versão \'0\' deve estar armazenado no repositório de eventos" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 51
 testRunner.And("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joao@concert.com.br" +
                    "\' e referente ao registro versão \'1\' deve estar armazenado no repositório de eve" +
                    "ntos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 52
 testRunner.And("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joao.machado@concer" +
                    "t.com.br\' e referente ao registro versão \'2\' deve estar armazenado no repositóri" +
                    "o de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 53
 testRunner.And("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joaosm@concert.com." +
                    "br\' e referente ao registro versão \'3\' deve estar armazenado no repositório de e" +
                    "ventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 54
 testRunner.And("o evento de snapshot USER_SNAPSHOT com id \'id1\', nome \'JOAO\', email \'joaosm@conce" +
                    "rt.com.br\' e referente ao registro versão \'4\' deve estar armazenado no repositór" +
                    "io de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
