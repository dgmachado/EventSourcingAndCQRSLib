// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EventSourcingAndCQRS.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Consolidar eventos do repositório de eventos")]
    public partial class ConsolidarEventosDoRepositorioDeEventosFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConsolidarEventosDoRepositórioDeEventos.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Consolidar eventos do repositório de eventos", "Como um componente de software\r\nDesejo consolidar uma entidade a partir de um con" +
                    "junto de eventos associados a esse e armazenados dentro do repositório de evento" +
                    "s", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Consolidar uma entidade a partir de um conjunto de eventos associados a esse e ar" +
            "mazenados dentro do repositório de eventos")]
        [NUnit.Framework.CategoryAttribute("ConsolidarEventosDoRepositórioDeEventos")]
        public virtual void ConsolidarUmaEntidadeAPartirDeUmConjuntoDeEventosAssociadosAEsseEArmazenadosDentroDoRepositorioDeEventos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Consolidar uma entidade a partir de um conjunto de eventos associados a esse e ar" +
                    "mazenados dentro do repositório de eventos", new string[] {
                        "ConsolidarEventosDoRepositórioDeEventos"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("que exista um repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 10
 testRunner.And("que exista um serviço consolidador de usuários a partir do repositório de eventos" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 11
 testRunner.When(@"o evento USER_CREATED com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '0', disparado a partir da execução do comando CREATE_USER com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '-1', for salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 12
 testRunner.And(@"o evento USER_EMAIL_CHANGED com id 'id1', nome 'JOAO', email 'joao@ibm.com.br' e referente ao registro versão '1', disparado a partir da execução do comando CHANGE_EMAIL com id 'id1', email 'joao@ibm.com.br' e referente ao registro versão '0', for salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 13
 testRunner.And(@"o evento USER_EMAIL_CHANGED com id 'id1', nome 'JOAO', email 'joao@concert.com.br' e referente ao registro versão '2', disparado a partir da execução do comando CHANGE_EMAIL com id 'id1', email 'joao@concert.com.br' e referente ao registro versão '1', for salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 14
 testRunner.Then("o usuário de id \'id1\', nome \'JOAO\', email \'joao@concert.com.br\' e referente ao re" +
                    "gistro versão \'2\' deve estar armazenado no repositório de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Consolidar uma entidade com ausência de eventos associados a esse e armazenados d" +
            "entro do repositório de eventos")]
        [NUnit.Framework.CategoryAttribute("ConsolidarEventosDoRepositórioDeEventos")]
        public virtual void ConsolidarUmaEntidadeComAusenciaDeEventosAssociadosAEsseEArmazenadosDentroDoRepositorioDeEventos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Consolidar uma entidade com ausência de eventos associados a esse e armazenados d" +
                    "entro do repositório de eventos", new string[] {
                        "ConsolidarEventosDoRepositórioDeEventos"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("que exista um repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 19
 testRunner.And("que exista um serviço consolidador de usuários a partir do repositório de eventos" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 20
 testRunner.When("for consultado o usuário de id \'id1\' dentro do repositório de agregado raiz usuár" +
                    "io", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 21
 testRunner.Then("uma exceção do tipo ENTITY_NOT_FOUND deve ser lançada", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Consolidar entidades distintas a partir de um conjunto de eventos associados a es" +
            "ses e armazenados dentro do repositório de eventos")]
        [NUnit.Framework.CategoryAttribute("ConsolidarEventosDoRepositórioDeEventos")]
        public virtual void ConsolidarEntidadesDistintasAPartirDeUmConjuntoDeEventosAssociadosAEssesEArmazenadosDentroDoRepositorioDeEventos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Consolidar entidades distintas a partir de um conjunto de eventos associados a es" +
                    "ses e armazenados dentro do repositório de eventos", new string[] {
                        "ConsolidarEventosDoRepositórioDeEventos"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("que exista um repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 26
 testRunner.And("que exista um serviço consolidador de usuários a partir do repositório de eventos" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 27
 testRunner.When(@"o evento USER_CREATED com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '0', disparado a partir da execução do comando CREATE_USER com id 'id1', nome 'JOAO', email 'joao@microsoft.com.br' e referente ao registro versão '-1', for salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 28
 testRunner.And(@"o evento USER_CREATED com id 'id2', nome 'PEDRO', email 'pedro@concert.com.br' e referente ao registro versão '0', disparado a partir da execução do comando CREATE_USER com id 'id2', nome 'PEDRO', email 'pedro@microsoft.com.br' e referente ao registro versão '-1', for salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 29
 testRunner.And(@"o evento USER_EMAIL_CHANGED com id 'id1', nome 'JOAO', email 'joao@concert.com.br' e referente ao registro versão '1', disparado a partir da execução do comando CHANGE_EMAIL com id 'id1', email 'joao@concert.com.br' e referente ao registro versão '0', for salvo no repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 30
 testRunner.Then("o usuário de id \'id1\', nome \'JOAO\', email \'joao@concert.com.br\' e referente ao re" +
                    "gistro versão \'1\' deve estar armazenado no repositório de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 31
 testRunner.And("o usuário de id \'id2\', nome \'PEDRO\', email \'pedro@concert.com.br\' e referente ao " +
                    "registro versão \'0\' deve estar armazenado no repositório de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
