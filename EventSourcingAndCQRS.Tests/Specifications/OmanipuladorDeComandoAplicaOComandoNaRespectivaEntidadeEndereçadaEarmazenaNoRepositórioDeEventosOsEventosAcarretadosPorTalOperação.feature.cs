// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EventSourcingAndCQRS.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("O manipulador de comando aplica o comando na respectiva entidade endereçada e arm" +
        "azena no repositório de eventos os eventos acarretados por tal operação")]
    public partial class OManipuladorDeComandoAplicaOComandoNaRespectivaEntidadeEnderecadaEArmazenaNoRepositorioDeEventosOsEventosAcarretadosPorTalOperacaoFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OmanipuladorDeComandoAplicaOComandoNaRespectivaEntidadeEndereçadaEarmazenaNoRepositórioDeEventosOsEventosAcarretadosPorTalOperação.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "O manipulador de comando aplica o comando na respectiva entidade endereçada e arm" +
                    "azena no repositório de eventos os eventos acarretados por tal operação", @"Como um componente de software
Desejo enviar um comando para o manipulador responsável pelo mesmo
Para que o manipulador de comando responsável possa receber meu comando e aplicá-lo na respectiva entidade endereçada e salvar os eventos acarretados por tal operação", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("O manipulador de comando aplica o comando na versão esperada da respectiva entida" +
            "de endereçada e armazena no repositório de eventos os eventos acarretados por ta" +
            "l operação")]
        [NUnit.Framework.CategoryAttribute("OmanipuladorDeComandoAplicaOComandoNaRespectivaEntidadeEndereçadaEarmazenaNoRepos" +
            "itórioDeEventosOsEventosAcarretadosPorTalOperação")]
        public virtual void OManipuladorDeComandoAplicaOComandoNaVersaoEsperadaDaRespectivaEntidadeEnderecadaEArmazenaNoRepositorioDeEventosOsEventosAcarretadosPorTalOperacao()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("O manipulador de comando aplica o comando na versão esperada da respectiva entida" +
                    "de endereçada e armazena no repositório de eventos os eventos acarretados por ta" +
                    "l operação", new string[] {
                        "OmanipuladorDeComandoAplicaOComandoNaRespectivaEntidadeEndereçadaEarmazenaNoRepos" +
                            "itórioDeEventosOsEventosAcarretadosPorTalOperação"});
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.Given("que exista um encaminhador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 11
 testRunner.And("que exista um publicador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 12
 testRunner.And("que exista um encaminhador de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 13
 testRunner.And("que exista um publicador de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 14
 testRunner.And("que exista um repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 15
 testRunner.And("que exista um serviço consolidador de usuários a partir do repositório de eventos" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 16
 testRunner.And("que exista um manipulador de comando de criação de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 17
 testRunner.And("que exista um manipulador de comando de modificação de email de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 18
 testRunner.And("que o manipulador de comando de criação de usuários tenha sido configurado para r" +
                    "eceber comandos que sejam do tipo CREATE_USER do encaminhador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 19
 testRunner.And("que o manipulador de comando de modificação de email de usuários tenha sido confi" +
                    "gurado para receber comandos que sejam do tipo CHANGE_USER_EMAIL do encaminhador" +
                    " de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 20
 testRunner.And("que tenha sido publicado no publicador de comandos o comando CREATE_USER com id \'" +
                    "id1\', nome \'JOAO\', email \'joao@microsoft.com.br\' e referente ao registro versão " +
                    "\'-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 21
 testRunner.When("for publicado no publicador de comandos o comando CHANGE_USER_EMAIL com id \'id1\'," +
                    " email \'joao@concert.com.br\' e referente ao registro versão \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 22
 testRunner.Then("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joao@concert.com.br" +
                    "\' e referente ao registro versão \'1\' deve ser publicado no publicador de eventos" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 23
 testRunner.And("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joao@concert.com.br" +
                    "\' e referente ao registro versão \'1\' deve estar armazenado no repositório de eve" +
                    "ntos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 24
 testRunner.And("o evento mais atualizado do usuário de id \'id1\' no repositório de eventos deve se" +
                    "r a versão \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("O manipulador de comando aplica o comando na versão superior da respectiva entida" +
            "de endereçada")]
        [NUnit.Framework.CategoryAttribute("OmanipuladorDeComandoAplicaOComandoNaRespectivaEntidadeEndereçadaEarmazenaNoRepos" +
            "itórioDeEventosOsEventosAcarretadosPorTalOperação")]
        public virtual void OManipuladorDeComandoAplicaOComandoNaVersaoSuperiorDaRespectivaEntidadeEnderecada()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("O manipulador de comando aplica o comando na versão superior da respectiva entida" +
                    "de endereçada", new string[] {
                        "OmanipuladorDeComandoAplicaOComandoNaRespectivaEntidadeEndereçadaEarmazenaNoRepos" +
                            "itórioDeEventosOsEventosAcarretadosPorTalOperação"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("que exista um encaminhador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 29
 testRunner.And("que exista um publicador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 30
 testRunner.And("que exista um encaminhador de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 31
 testRunner.And("que exista um publicador de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 32
 testRunner.And("que exista um repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 33
 testRunner.And("que exista um serviço consolidador de usuários a partir do repositório de eventos" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 34
 testRunner.And("que exista um manipulador de comando de criação de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 35
 testRunner.And("que exista um manipulador de comando de modificação de email de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 36
 testRunner.And("que o manipulador de comando de criação de usuários tenha sido configurado para r" +
                    "eceber comandos que sejam do tipo CREATE_USER do encaminhador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 37
 testRunner.And("que o manipulador de comando de modificação de email de usuários tenha sido confi" +
                    "gurado para receber comandos que sejam do tipo CHANGE_USER_EMAIL do encaminhador" +
                    " de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 38
 testRunner.And("que tenha sido publicado no publicador de comandos o comando CREATE_USER com id \'" +
                    "id1\', nome \'JOAO\', email \'joao@microsoft.com.br\' e referente ao registro versão " +
                    "\'-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 39
 testRunner.When("for publicado no publicador de comandos o comando CHANGE_USER_EMAIL com id \'id1\'," +
                    " email \'joao@concert.com.br\' e referente ao registro versão \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 40
 testRunner.Then("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joao@concert.com.br" +
                    "\' e referente ao registro versão \'3\' não deve ser publicado no publicador de eve" +
                    "ntos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 41
 testRunner.And("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joao@concert.com.br" +
                    "\' e referente ao registro versão \'3\' não deve estar armazenado no repositório de" +
                    " eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 42
 testRunner.And("o evento mais atualizado do usuário de id \'id1\' no repositório de eventos deve se" +
                    "r a versão \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("O manipulador de comando aplica o comando na versão inferior da respectiva entida" +
            "de endereçada")]
        [NUnit.Framework.CategoryAttribute("OmanipuladorDeComandoAplicaOComandoNaRespectivaEntidadeEndereçadaEarmazenaNoRepos" +
            "itórioDeEventosOsEventosAcarretadosPorTalOperação")]
        public virtual void OManipuladorDeComandoAplicaOComandoNaVersaoInferiorDaRespectivaEntidadeEnderecada()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("O manipulador de comando aplica o comando na versão inferior da respectiva entida" +
                    "de endereçada", new string[] {
                        "OmanipuladorDeComandoAplicaOComandoNaRespectivaEntidadeEndereçadaEarmazenaNoRepos" +
                            "itórioDeEventosOsEventosAcarretadosPorTalOperação"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given("que exista um encaminhador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 47
 testRunner.And("que exista um publicador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 48
 testRunner.And("que exista um encaminhador de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 49
 testRunner.And("que exista um publicador de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 50
 testRunner.And("que exista um repositório de eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 51
 testRunner.And("que exista um serviço consolidador de usuários a partir do repositório de eventos" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 52
 testRunner.And("que exista um manipulador de comando de criação de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 53
 testRunner.And("que exista um manipulador de comando de modificação de email de usuários", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 54
 testRunner.And("que o manipulador de comando de criação de usuários tenha sido configurado para r" +
                    "eceber comandos que sejam do tipo CREATE_USER do encaminhador de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 55
 testRunner.And("que o manipulador de comando de modificação de email de usuários tenha sido confi" +
                    "gurado para receber comandos que sejam do tipo CHANGE_USER_EMAIL do encaminhador" +
                    " de comandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 56
 testRunner.And("que tenha sido publicado no publicador de comandos o comando CREATE_USER com id \'" +
                    "id1\', nome \'JOAO\', email \'joao@microsoft.com.br\' e referente ao registro versão " +
                    "\'-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 57
 testRunner.When("for publicado no publicador de comandos o comando CHANGE_USER_EMAIL com id \'id1\'," +
                    " email \'joao@concert.com.br\' e referente ao registro versão \'-1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 58
 testRunner.Then("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joao@concert.com.br" +
                    "\' e referente ao registro versão \'0\' não deve ser publicado no publicador de eve" +
                    "ntos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 59
 testRunner.And("o evento USER_EMAIL_CHANGED com id \'id1\', nome \'JOAO\', email \'joao@concert.com.br" +
                    "\' e referente ao registro versão \'0\' não deve estar armazenado no repositório de" +
                    " eventos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 60
 testRunner.And("o evento mais atualizado do usuário de id \'id1\' no repositório de eventos deve se" +
                    "r a versão \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
